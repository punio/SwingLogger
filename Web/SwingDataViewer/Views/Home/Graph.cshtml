@using System.Drawing
@using SwingCommon
@model SwingDataViewer.Models.GraphViewModel
@{
    ViewData["Title"] = "Swing Data Graph";

    var clubTypeList = new Dictionary<string, ClubType[]> {
        {"ウッド", new[] { ClubType.W1, ClubType.W3, ClubType.W5, ClubType.W7, ClubType.W9 } },
        {"ユーティリティ", new[] { ClubType.U2, ClubType.U3, ClubType.U4, ClubType.U5, ClubType.U6 } },
        {"アイアン", new[] { ClubType.I3, ClubType.I4, ClubType.I5, ClubType.I6, ClubType.I7, ClubType.I8, ClubType.I9 } },
        {"ウェッジ", new[] { ClubType.PW, ClubType.AW, ClubType.SW, ClubType.LW } },
    };
}

<section class="basic">
    <div id="filterBox">
        <div>
            <div class="datefilter">
                <span class="title">データ期間</span>

                <span>開始</span>
                <div class="dategroup">
                    <div class="input-group date" id="datetimepickerFrom" data-target-input="nearest">
                        <input type="text" class="form-control datetimepicker-input" data-target="#datetimepickerFrom" value="@DateTime.UtcNow.AddMonths(-3).AddHours(9).ToString("yyyy/MM/dd")" />
                        <div class="input-group-append" data-target="#datetimepickerFrom" data-toggle="datetimepicker">
                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                    </div>
                </div>

                <span class="endTitle">終了</span>
                <div class="dategroup endDate">
                    <div class="input-group date" id="datetimepickerTo" data-target-input="nearest">
                        <input type="text" class="form-control datetimepicker-input" data-target="#datetimepickerTo" value="@DateTime.UtcNow.AddHours(9).ToString("yyyy/MM/dd")" />
                        <div class="input-group-append" data-target="#datetimepickerTo" data-toggle="datetimepicker">
                            <div class="input-group-text"><i class="fa fa-calendar"></i></div>
                        </div>
                    </div>
                </div>

                <div class="showDataButtonGroup">
                    <button id="showDataButton">表示</button>
                </div>
            </div>
        </div>
        <div id="dateFilter">

        </div>
        <div style="margin-top: 10px;">
            @foreach (var kv in clubTypeList)
            {
                <div>
                    <div class="pretty p-default parent">
                        <input type="checkbox" name="club" checked class="baseCheck" />
                        <div class="state @(kv.Value[0].ToString().ToLower())">
                            <label>@kv.Key</label>
                        </div>
                    </div>
                    @foreach (var club in kv.Value)
                    {
                        <div class="pretty p-default clubChild">
                            <input type="checkbox" name="club" value="@(club)" checked />
                            <div class="state @(club.ToString().ToLower())">
                                <label>@club</label>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
        <div style="margin-top: 10px;">
            <span>Y軸</span>
            <select name="y">
                <option value="headspeed">ヘッドスピード</option>
                <option value="ballspeed">ボールスピード</option>
                <option value="distance">飛距離</option>
                <option value="meet" selected>ミート率</option>
            </select>
            <span style="margin-left: 20px;">X軸</span>
            <select name="x">
                <option value="headspeed" selected>ヘッドスピード</option>
                <option value="ballspeed">ボールスピード</option>
                <option value="distance">飛距離</option>
                <option value="meet">ミート率</option>
            </select>
        </div>
    </div>

    <div class="chart">
        <canvas id="chartCanvas"></canvas>
    </div>

    <div class="chart">
        <canvas id="pieChartCanvas"></canvas>
    </div>

    <span>ボールスピードが計測できないデータは素振りとして除外しています(30y以下のアプローチは大体除外されます)</span>
</section>

@section Styles{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/pretty-checkbox@3.0/dist/pretty-checkbox.min.css" />
    <style type="text/css">
        @foreach(var kv in ColorTable.DefaultPalette)
        {
            <text>.pretty input:checked ~ .state.</text>@(kv.Key.ToString().ToLower()) <text> label:after {background-color: rgba(</text>@($"{kv.Value.R},{kv.Value.G},{kv.Value.B},{kv.Value.A / 255.0:f2}")<text>) !important}</text>
        }
    </style>
    <link rel="stylesheet" href="https://netdna.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.0.1/css/tempusdominus-bootstrap-4.min.css" />
    <environment include="Development">
        <link rel="stylesheet" href="~/css/graph.css" />
    </environment>
}

@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/chart.js@2.8.0/dist/Chart.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.22.2/moment-with-locales.min.js"></script>
    <script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/tempusdominus-bootstrap-4/5.0.1/js/tempusdominus-bootstrap-4.min.js"></script>

    <script>
        var allData;
        var filteredList;
        var filteredData;
        var pieChart;
        var scatterChart;
        var xAxis = "headspeed";
        var yAxis = "meet";

        var colorTable = {};
        @foreach (var kv in ColorTable.DefaultPalette)
        {
            <text>colorTable['</text>@kv.Key<text>'] =
            'rgba(</text>@($"{kv.Value.R},{kv.Value.G},{kv.Value.B},{kv.Value.A / 255.0:f2}")<text>)';</text>
        }

        function getSelectedInputItems(name) {
            var searchData = [];
            $('[name=' + name + ']:checked').each(function() {
                searchData.push($(this).val());
            });
            return searchData;
        }

        function groupBy(array, property) {
            return array.reduce(
                (group, item) => Object.assign(group,
                    {
                        [item[property]]: (group[item[property]] || []).concat(item)
                    }),
                {}
            );
        }

        function updateChart() {
            xAxis = $('[name=x]').val();
            yAxis = $('[name=y]').val();
            var selectedClubs = getSelectedInputItems("club");
            var selectedDays = getSelectedInputItems("date");
            filteredList = allData.filter(function(element) {
                return element.ballSpeed > 0 &&
                    selectedClubs.indexOf(element.club) !== -1 &&
                    selectedDays.indexOf(element.date) !== -1;
            });
            filteredData = groupBy(filteredList, 'club');
            $.each(filteredData,
                function(key, values) {
                    console.log(key + " : " + values.length);
                });

            createPieChart();
            createScatterChart();
        }

        function createPieChart() {
            var data = {
                datasets: [
                    {
                        backgroundColor: [],
                        data: []
                    }
                ],
                labels: []
            };

            $.each(filteredData,
                function(key, values) {
                    data.datasets[0].backgroundColor.push(colorTable[key]);
                    data.datasets[0].data.push(values.length);
                    data.labels.push(key);
                });

            if (pieChart) {
                pieChart.data = data;
                pieChart.options.title.text = 'All balls (total ' + filteredList.length + ')';
                pieChart.options.animation = false;
                pieChart.update();
            } else {
                var ctx = document.getElementById('pieChartCanvas').getContext('2d');
                pieChart = new Chart(ctx,
                    {
                        type: 'pie',
                        data: data,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            title: {
                                display: true,
                                text: 'All balls (total ' + filteredList.length + ')'
                            }
                        }
                    });
            }
        }

        function getScatterAxesLabel(axis) {
            switch (axis) {
            case "headspeed":
                return "ヘッドスピード(m/s)";
            case "ballspeed":
                return "ボールスピード(m/s)";
            case "distance":
                return "飛距離(yard)";
            case "meet":
                return "ミート率";
            }
            return "";
        }

        function getData(axis, val) {
            switch (axis) {
            case "headspeed":
                return val.headSpeed;
            case "ballspeed":
                return val.ballSpeed;
            case "distance":
                return val.distance;
            case "meet":
                return val.meet;
            }
            return 0;
        }

        function createScatterChart() {
            var data = {
                datasets: [],
                labels: []
            };
            $.each(filteredData,
                function(key, values) {
                    var d = {
                        label: key,
                        backgroundColor: colorTable[key],
                        data: []
                    }
                    $.each(values,
                        function(index, val) {
                            d.data.push({
                                x: getData(xAxis, val),
                                y: getData(yAxis, val)
                            });
                        });
                    data.datasets.push(d);
                });

            if (scatterChart) {
                scatterChart.data = data;
                scatterChart.options.animation = false;
                scatterChart.options.scales.yAxes[0].scaleLabel.labelString = getScatterAxesLabel(yAxis);
                scatterChart.options.scales.xAxes[0].scaleLabel.labelString = getScatterAxesLabel(xAxis);
                scatterChart.update();
            } else {
                var ctx = document.getElementById('chartCanvas').getContext('2d');
                scatterChart = new Chart(ctx,
                    {
                        type: 'scatter',
                        data: data,
                        options: {
                            responsive: true,
                            maintainAspectRatio: false,
                            title: {
                                display: true,
                                text: 'GST-7 Swing data',
                            },
                            scales: {
                                yAxes: [
                                    {
                                        scaleLabel: {
                                            display: true,
                                            labelString: getScatterAxesLabel(yAxis)
                                        }
                                    }
                                ],
                                xAxes: [
                                    {
                                        scaleLabel: {
                                            display: true,
                                            labelString: getScatterAxesLabel(xAxis)
                                        }
                                    }
                                ]
                            },
                            tooltips: {
                                callbacks: {
                                    label: function(tooltipItem, data) {
                                        var label = data.datasets[tooltipItem.datasetIndex].label;
                                        return label + ': (' + tooltipItem.xLabel + ', ' + tooltipItem.yLabel + ')';
                                    }
                                }
                            }
                        }
                    }
                );
            }
        }

        $(function() {

            $(document).on('change', 'input', function() { updateChart(); });
            $('select').change(function() { updateChart(); });


            $('.date').datetimepicker({
                locale: 'ja',
                format: 'L'
            });

            $('#showDataButton').on('click',
                function() {
                    $("#showDataButton").prop('disabled', true);
                    const from = moment($('#datetimepickerFrom').datetimepicker('viewDate')).format('YYYYMMDD');
                    const to = moment($('#datetimepickerTo').datetimepicker('viewDate')).format('YYYYMMDD');
                    $.post('@Url.Action("Graph", "Data")',
                            {
                                'id': '@Model.User',
                                'from': from,
                                'to': to,
                                'offset': new Date().getTimezoneOffset()
                            })
                        .done(function(data) {
                            allData = data.swing;

                            $('#dateFilter').empty();

                            let dates = groupBy(data.date, 'month');
                            $.each(dates,
                                function(key, values) {
                                    let groupBox = $('<div></div>');
                                    let monthBox =
                                        $(
                                            '<div class="pretty p-default parent"><input type="checkbox" name="club" checked class="baseCheck" /><div class="state"><label>' +
                                            key +
                                            '</label></div></div>');
                                    groupBox.append(monthBox);
                                    $.each(values,
                                        function(index, d) {
                                            groupBox.append(
                                                '<div class="pretty p-default dayChild"><input type="checkbox" name="date" value="' +
                                                d.day +
                                                '" checked/><div class="state"><label>' +
                                                d.day +
                                                '</label></div></div>');
                                        });
                                    $('#dateFilter').append(groupBox);
                                });
                            updateChart();

                            $('.baseCheck').change(function() {
                                const checked = $(this).prop("checked");
                                $(this).parent().nextAll().children("input").prop("checked", checked);
                            });
                        })
                        .fail(function() {
                            alert('データの取得に失敗しました');
                        })
                        .always(function () {
                            $("#showDataButton").prop('disabled', false);
                        });

                });
        });
    </script>
}
